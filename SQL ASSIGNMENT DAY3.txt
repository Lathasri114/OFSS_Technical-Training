---DAY3 ASSIGNMENT---

SELECT * FROM BOOKS_1;
SELECT * FROM MEMBER_1;
SELECT * FROM ISSUE;

---1)	List the various categories and count of books in each category
SELECT CATEGORY,COUNT(CATEGORY) FROM BOOKS_1 GROUP BY CATEGORY;

---2)	List the book_No and the number of times the book is issued in the descending order of count.
SELECT BOOK_NO, COUNT(BOOK_NO) FROM ISSUE GROUP BY BOOK_NO ORDER BY COUNT(BOOK_NO) DESC;

--- 3)	Find the maximum, minimum, total and average penalty amount in the member table.
SELECT * FROM MEMBER_1;
SELECT MAX(PENALTY_AMOUNT),MIN(PENALTY_AMOUNT),SUM(PENALTY_AMOUNT),AVG(PENALTY_AMOUNT) FROM MEMBER_1;

---4)	Display the member id and the no of books for each member that has issued more then 2 books.
SELECT * FROM ISSUE;
SELECT MEMBER_ID, COUNT(BOOK_NO) FROM ISSUE GROUP BY MEMBER_ID HAVING COUNT(BOOK_NO)>2;

---5)	Display the member id, book no and no of times the same book is issued by the member in the descending order of count.
SELECT * FROM ISSUE;
SELECT MEMBER_ID,BOOK_NO,COUNT(BOOK_NO) FROM ISSUE GROUP BY MEMBER_ID,BOOK_NO ORDER BY COUNT(BOOK_NO) DESC;

---6)	Display the month and no of books issued each month in the descending order of count.
SELECT * FROM ISSUE;
SELECT COUNT(BOOK_NO), TO_CHAR(ISSUE_DATE,'MON') FROM ISSUE GROUP BY TO_CHAR(ISSUE_DATE,'MON') ORDER BY COUNT(BOOK_NO)DESC;

---7) List the book_no of all the books that are not issued to any member so far. 
SELECT BOOK_NO FROM BOOKS_1 WHERE BOOK_NO NOT IN (SELECT BOOK_NO FROM ISSUE);

---8)	List all the member id that exist in member table and has also at least one book issued by them. 
SELECT * FROM MEMBER_1;
SELECT * FROM ISSUE;
SELECT MEMBER_ID FROM MEMBER_1 WHERE MEMBER_ID IN (SELECT MEMBER_ID FROM ISSUE);

---9)	List the member ID with highest and lowest no of books issued. 
SELECT * FROM ISSUE;
SELECT MEMBER_ID, BOOK_COUNT
FROM (
    SELECT MEMBER_ID, COUNT(BOOK_NO) AS BOOK_COUNT
    FROM ISSUE
    GROUP BY MEMBER_ID
    ORDER BY BOOK_COUNT DESC
)
WHERE ROWNUM = 1

UNION 

SELECT MEMBER_ID, BOOK_COUNT
FROM (
    SELECT MEMBER_ID, COUNT(BOOK_NO) AS BOOK_COUNT
    FROM ISSUE
    GROUP BY MEMBER_ID
    ORDER BY BOOK_COUNT ASC
)
WHERE ROWNUM = 1;

---10)	List all the Issue_details for books issued in December and July without using any arithmetic, Logical or comparison operator.
SELECT TO_CHAR(ISSUE_DATE,'MON') FROM ISSUE;
SELECT * FROM ISSUE WHERE TO_CHAR(ISSUE_DATE,'MON') IN ('DEC','JUL');

---11)	 List the Book_No, Book_Name and Issue_date for all the books that are issued in month of December and belong to category Database.
SELECT BOOKS_1.BOOK_NO,ISSUE.ISSUE_DATE,BOOKS_1.CATEGORY FROM ISSUE 
INNER JOIN BOOKS_1 ON ISSUE.BOOK_NO = BOOKS_1.BOOK_NO
WHERE (TO_CHAR(ISSUE.ISSUE_DATE,'MON')IN('DEC')) AND (BOOKS_1.CATEGORY='Databse');

---12) List the Member Id, Member Name and No of books Issued in the descending order of the count.
SELECT * FROM MEMBER_1;
SELECT * FROM ISSUE;
SELECT COUNT(ISSUE.MEMBER_ID),ISSUE.MEMBER_ID,MEMBER_1.MEMBER_NAME FROM ISSUE
LEFT JOIN MEMBER_1
ON ISSUE.MEMBER_ID=MEMBER_1.MEMBER_ID
GROUP BY ISSUE.MEMBER_ID,MEMBER_1.MEMBER_NAME
ORDER BY COUNT(ISSUE.MEMBER_ID) DESC;

---13)	List the Book No, Book Name, Issue_date and Return_Date for all the books issued by Richa Sharma.
SELECT * FROM MEMBER_1;
SELECT * FROM ISSUE;
SELECT * FROM BOOKS_1;
INSERT INTO ISSUE (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (7003, 102, 1, TO_DATE('2005-12-01', 'YYYY-MM-DD'), TO_DATE('2005-12-15', 'YYYY-MM-DD'));

INSERT INTO ISSUE (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (7004, 105, 1, TO_DATE('2006-05-10', 'YYYY-MM-DD'), TO_DATE('2006-05-24', 'YYYY-MM-DD'));
DESC MEMBER_1;
INSERT INTO MEMBER_1 (MEMBER_ID, MEMBER_NAME, MEMBER_ADDRESS, ACC_OPEN_DATE, MEMBERSHIP_TYPE, FEES_PAID, MAX_BOOKS_ALLOWED, PENALTY_AMOUNT)
VALUES (1, 'Richa Sharma', 'BENGALURU', TO_DATE('2005-01-15', 'YYYY-MM-DD'), 'Lifetime', 500, 5, 25);

SELECT B.BOOK_NO, B.BOOK_NAME, I.ISSUE_DATE, I.RETURN_DATE
FROM ISSUE I
JOIN BOOKS_1 B ON I.BOOK_NO = B.BOOK_NO
JOIN MEMBER_1 M ON I.MEMBER_ID = M.MEMBER_ID
WHERE M.MEMBER_NAME = 'Richa Sharma';

---14)	List the details of all the members that have issued books in Database category.
SELECT M.MEMBER_ID, M.MEMBER_NAME, M.MEMBER_ADDRESS, M.ACC_OPEN_DATE, M.MEMBERSHIP_TYPE, 
       M.FEES_PAID, M.MAX_BOOKS_ALLOWED, M.PENALTY_AMOUNT
FROM ISSUE I
JOIN BOOKS_1 B ON I.BOOK_NO = B.BOOK_NO
JOIN MEMBER_1 M ON I.MEMBER_ID = M.MEMBER_ID
WHERE B.CATEGORY = 'Databse';
SELECT * FROM BOOKS_1 WHERE CATEGORY = 'Databse';

---15)	List all the books that have highest price in their own category.
SELECT B.BOOK_NO, B.BOOK_NAME, B.COST, B.CATEGORY
FROM BOOKS_1 B
WHERE (B.COST, B.CATEGORY) IN (
    SELECT MAX(B1.COST), B1.CATEGORY
    FROM BOOKS_1 B1
    GROUP BY B1.CATEGORY
);

---16)	List all the Issue_Details where Issue_date is not within the Acc_open_date and Return_date for that member.
SELECT I.BOOK_NO, I.ISSUE_DATE, I.RETURN_DATE, M.MEMBER_ID, M.MEMBER_NAME
FROM ISSUE I
JOIN MEMBER_1 M ON I.MEMBER_ID = M.MEMBER_ID
WHERE I.ISSUE_DATE NOT BETWEEN M.ACC_OPEN_DATE AND I.RETURN_DATE;

---17)	List all the members that have not issued a single book so far.
SELECT * FROM ISSUE;
SELECT * FROM BOOKS_1;
SELECT * FROM MEMBER_1;
SELECT DISTINCT M.MEMBER_ID, M.MEMBER_NAME FROM MEMBER_1 M
JOIN ISSUE I ON M.MEMBER_ID=I.MEMBER_ID;

---18)	List all the Members where No of books Issued exceeds the Max No of books allowed.
SELECT M.MEMBER_ID, M.MEMBER_NAME, COUNT(I.BOOK_NO) AS BOOKS_ISSUED, M.MAX_BOOKS_ALLOWED
FROM MEMBER_1 M
JOIN ISSUE I ON M.MEMBER_ID = I.MEMBER_ID
GROUP BY M.MEMBER_ID, M.MEMBER_NAME, M.MAX_BOOKS_ALLOWED
HAVING COUNT(I.BOOK_NO) > M.MAX_BOOKS_ALLOWED;

---19)
SELECT DISTINCT M.MEMBER_ID, M.MEMBER_NAME
FROM ISSUE I
JOIN MEMBER_1 M ON I.MEMBER_ID = M.MEMBER_ID
WHERE I.BOOK_NO IN (
    SELECT I1.BOOK_NO
    FROM ISSUE I1
    JOIN MEMBER_1 M1 ON I1.MEMBER_ID = M1.MEMBER_ID
    WHERE M1.MEMBER_NAME = 'GARIMA SHARMA'
);

--20)
SELECT B.BOOK_NAME, B.COST
FROM ISSUE I
JOIN BOOKS_1 B ON I.BOOK_NO = B.BOOK_NO
WHERE I.RETURN_DATE IS NULL 
AND I.ISSUE_DATE < SYSDATE - 30;

--21)
SELECT B.AUTHOR_NAME, B.BOOK_NAME
FROM BOOKS_1 B
GROUP BY B.AUTHOR_NAME, B.BOOK_NAME
HAVING COUNT(B.BOOK_NO) > 1;

--22)
SELECT M.MEMBER_ID, M.MEMBER_NAME
FROM MEMBER_1 M
JOIN ISSUE I ON M.MEMBER_ID = I.MEMBER_ID
GROUP BY M.MEMBER_ID, M.MEMBER_NAME
HAVING COUNT(I.BOOK_NO) = (SELECT MAX(COUNT(BOOK_NO)) FROM ISSUE GROUP BY MEMBER_ID)
OR COUNT(I.BOOK_NO) = (SELECT MIN(COUNT(BOOK_NO)) FROM ISSUE GROUP BY MEMBER_ID);

--23)
SELECT * 
FROM (
    SELECT B.BOOK_NO, B.BOOK_NAME, B.COST
    FROM BOOKS_1 B
    ORDER BY B.COST DESC
)
WHERE ROWNUM <= 3;
--24)
SELECT SUM(B.COST) AS TOTAL_COST
FROM ISSUE I
JOIN BOOKS_1 B ON I.BOOK_NO = B.BOOK_NO
WHERE I.RETURN_DATE IS NULL;

--25)
SELECT B.BOOK_NO, B.BOOK_NAME, COUNT(I.BOOK_NO) AS ISSUE_COUNT
FROM ISSUE I
JOIN BOOKS_1 B ON I.BOOK_NO = B.BOOK_NO
GROUP BY B.BOOK_NO, B.BOOK_NAME
ORDER BY ISSUE_COUNT DESC
FETCH FIRST 1 ROWS ONLY;

--26)
SELECT COUNT(I.BOOK_NO) AS BOOKS_ISSUED
FROM ISSUE I
JOIN MEMBER_1 M ON I.MEMBER_ID = M.MEMBER_ID
WHERE M.MEMBERSHIP_TYPE = 'Lifetime';

--27)
SELECT M.MEMBERSHIP_TYPE, COUNT(M.MEMBER_ID) AS MEMBER_COUNT
FROM MEMBER_1 M
GROUP BY M.MEMBERSHIP_TYPE;

--28)
SELECT M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE, COUNT(I.BOOK_NO) AS BOOK_COUNT
FROM MEMBER_1 M
JOIN ISSUE I ON M.MEMBER_ID = I.MEMBER_ID
GROUP BY M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE
ORDER BY BOOK_COUNT DESC
FETCH FIRST 5 ROWS ONLY;

--29)
SELECT * FROM (
    SELECT M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE, COUNT(I.BOOK_NO) AS BOOK_COUNT
    FROM MEMBER_1 M
    JOIN ISSUE I ON M.MEMBER_ID = I.MEMBER_ID
    GROUP BY M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE
    ORDER BY M.MEMBERSHIP_TYPE, BOOK_COUNT DESC
)
WHERE ROWNUM <= 3;

--30)
SELECT M.MEMBER_ID, M.MEMBER_NAME, M.ACC_OPEN_DATE
FROM MEMBER_1 M
ORDER BY M.ACC_OPEN_DATE
FETCH FIRST 5 ROWS ONLY;

--31)
SELECT M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE
FROM MEMBER_1 M
JOIN ISSUE I ON M.MEMBER_ID = I.MEMBER_ID
WHERE I.ISSUE_DATE BETWEEN TO_DATE('01-DEC-2006', 'DD-MON-YYYY') AND TO_DATE('31-DEC-2006', 'DD-MON-YYYY');

--32)
SELECT DISTINCT M.MEMBER_ID, M.MEMBER_NAME
FROM MEMBER_1 M
JOIN ISSUE I ON M.MEMBER_ID = I.MEMBER_ID
WHERE I.RETURN_DATE IS NULL;

--33)
SELECT M.MEMBER_ID, M.MEMBER_NAME
FROM MEMBER_1 M
WHERE M.ACC_OPEN_DATE = (SELECT ACC_OPEN_DATE FROM MEMBER_1 WHERE MEMBER_NAME = 'Garima Sharma');

--34)
SELECT DISTINCT M.MEMBER_ID, M.MEMBER_NAME
FROM MEMBER_1 M
JOIN ISSUE I ON M.MEMBER_ID = I.MEMBER_ID
JOIN BOOKS_1 B ON I.BOOK_NO = B.BOOK_NO
WHERE B.AUTHOR_NAME = 'Loni' AND TO_CHAR(I.ISSUE_DATE, 'MM') = '12';

--35)
SELECT B.AUTHOR_NAME
FROM BOOKS_1 B
JOIN ISSUE I ON B.BOOK_NO = I.BOOK_NO
JOIN MEMBER_1 M ON I.MEMBER_ID = M.MEMBER_ID
WHERE M.MEMBERSHIP_TYPE = 'Lifetime'
GROUP BY B.AUTHOR_NAME
ORDER BY COUNT(I.BOOK_NO) ASC
FETCH FIRST 1 ROWS ONLY;

--36)
SELECT B.AUTHOR_NAME, COUNT(I.BOOK_NO) AS ISSUED_COUNT
FROM BOOKS_1 B
JOIN ISSUE I ON B.BOOK_NO = I.BOOK_NO
JOIN MEMBER_1 M ON I.MEMBER_ID = M.MEMBER_ID
WHERE M.MEMBERSHIP_TYPE = 'Half Yearly'
GROUP BY B.AUTHOR_NAME
ORDER BY ISSUED_COUNT DESC
FETCH FIRST 3 ROWS ONLY;

--37)
SELECT B.BOOK_NAME, COUNT(I.BOOK_NO) AS ISSUED_COUNT
FROM BOOKS_1 B
JOIN ISSUE I ON B.BOOK_NO = I.BOOK_NO
JOIN MEMBER_1 M ON I.MEMBER_ID = M.MEMBER_ID
WHERE M.MEMBERSHIP_TYPE = 'Annual'
GROUP BY B.BOOK_NAME
ORDER BY ISSUED_COUNT DESC
FETCH FIRST 5 ROWS ONLY;

--38)
SELECT DISTINCT M.MEMBER_NAME
FROM MEMBER_1 M
JOIN ISSUE I ON M.MEMBER_ID = I.MEMBER_ID
JOIN BOOKS_1 B ON I.BOOK_NO = B.BOOK_NO
WHERE B.COST > 300 AND B.AUTHOR_NAME = 'Scott Urman';

--39)
SELECT M.MEMBERSHIP_TYPE, B.CATEGORY, COUNT(I.BOOK_NO) AS BOOK_COUNT
FROM ISSUE I
JOIN MEMBER_1 M ON I.MEMBER_ID = M.MEMBER_ID
JOIN BOOKS_1 B ON I.BOOK_NO = B.BOOK_NO
GROUP BY M.MEMBERSHIP_TYPE, B.CATEGORY;

--40)
SELECT M.MEMBER_ID, M.MEMBER_NAME
FROM MEMBER_1 M
JOIN ISSUE I ON M.MEMBER_ID = I.MEMBER_ID
WHERE M.MEMBERSHIP_TYPE = 'Lifetime'
AND M.ACC_OPEN_DATE BETWEEN TO_DATE('01-JAN-2006', 'DD-MON-YYYY') AND TO_DATE('31-DEC-2006', 'DD-MON-YYYY')
GROUP BY M.MEMBER_ID, M.MEMBER_NAME
HAVING COUNT(I.BOOK_NO) = 1;
